targets:
  # this part of the target name is specifically removed.
  # it's kind of hacky, but separates it from build dependencies.
  coffee:
    android:
      armv8a:
        nougat:
          - gles3
        lollipop:
          - gles3
      armv7a:
        nougat:
          - gles2
          - gles3
        lollipop:
          - gles3
        kitkat:
          - gles2
        gingerbread:
          - gles2
      mips:
        kitkat:
          - .
      mips64:
        kitkat:
          - .
      x86:
        kitkat:
          - .
      x86_64:
        kitkat:
          - .
    ubuntu:
      amd64:
        - .
        - tools
        - gles2
        - gles3
      i686:
        - gles
        - gles2
    fedora:
      - amd64
    steam:
      - amd64
    coverage:
      - .
    docs:
      - .
    emscripten:
      - asmjs
      - wasm
    maemo:
      - armel
    raspberry:
      - armhf
    mingw:
      - w64
    osx:
      - .
    ios:
      - .
      - x86_64
      - x86

global-sets:
  containerized:
    RUNNER: Makefile.multi
    CMAKE_SOURCE_DIR: $(container.src)
    CMAKE_BUILD_DIR: $(container.build)
    CMAKE_INSTALL_DIR: $(container.install)
    NATIVE_LIBRARY_DIR: $(dependencies.native-libs.target)
    COFFEE_ROOT_DIR: $(lib.target)
    ANDROID_NDK_INTERNAL: /home/coffee/android-ndk-linux
    ANDROID_SDK_INTERNAL: /home/coffee/android-sdk-linux
  bare:
    RUNNER: Makefile.workspace
    CMAKE_SOURCE_DIR: $(project.src)
    CMAKE_BUILD_DIR: $(project.build)
    CMAKE_INSTALL_DIR: $(project.install)
    NATIVE_LIBRARY_DIR: $(dependencies.native-libs.root)
    COFFEE_ROOT_DIR: $(lib.root)
    ANDROID_NDK_INTERNAL: $(env:ANDROID_NDK)
    ANDROID_SDK_INTERNAL: $(env:ANDROID_SDK)

# environment variables exposed to the outside
globals:
  BUILD_DIR: $(env:PWD)
  SOURCE_DIR: $(env:PWD)/..
  ROOT_DIR: $(env:SOURCE_DIR)/$(env:MAKEFILE_DIR)
  GENERATE_PROGRAMS: OFF
  # this one determines building in a container or natively
  # it switches global-sets
  BUILD_MODE: containerized
  CONFIGURATION: Debug
  HEADLESS: ON

# variables are transformed into project.src
variables:
  # for switching between Dockerized and native build environments
  runner-choice: $(env:RUNNER)
  # the top-level directory for containing build data
  multi:
    root: $(env:BUILD_DIR)
  # directories in real filesystem, never in container
  project:
    src: $(env:SOURCE_DIR)
    build: $(multi.root)
    install: $(multi.root)/build
  # when running in a Docker container, these paths are used
  # Apple builds work differently, dereferenced through $(cmake.*)
  container:
    src: /home/coffee/project
    build: /home/coffee/build
    install: /home/coffee/out
  # dereference point for Apple builds, where Docker does not exist
  # Apple platforms simply use $(project.*)
  cmake:
    src: $(env:CMAKE_SOURCE_DIR)
    build: $(env:CMAKE_BUILD_DIR)
    install: $(env:CMAKE_INSTALL_DIR)
    coffee-lib: $(env:COFFEE_ROOT_DIR)
    native-lib: $(env:NATIVE_LIBRARY_DIR)
  # already-compiled dependencies
  dep:
    root: $(project.build)/dependencies
  # sub-path for building dependencies, not downloading
  dep-target: DEP_DUMMY # Are used for build dependencies
  build-arch: ARCH_DUMMY # ^
  bdep.root: BDEP_DUMMY # ^
  cmake-project.src: /home/coffee/cmake-project # ^
  build-dep:
    root: $(project.build)/build-dependencies
    src-root: $(build-dep.root)/$(dep-target)/source
    src: $(container.src)
    install: $(container.install)
    install-root: $(build-dep.root)/$(dep-target)/install/$(build-arch)
    build: $(container.build)
    build-root: $(build-dep.root)/$(dep-target)/build/$(build-arch)
  # .prettyname is used within native-library-bundle for platform names
  # .build-type is just configuration mode
  build:
    prettyname: Nothing
    build-type: $(env:CONFIGURATION)
  # For importing the Coffee library
  lib:
    flavor: ERROR_ABORT_DELET_THIS
    root: $(env:COFFEE_DIR)
    target: /home/coffee/library

  # this is the entire Android build prelaod,
  #  determining all properties for Android builds
  android:
    stl: c++_static
    toolchain: clang
    features: rtti;exceptions
    graphics: gles-2
    api: 9
    abi: nothing
    arm-neon: OFF
    gles20: ON
    ndk: $(env:ANDROID_NDK_INTERNAL)
    sdk: $(env:ANDROID_SDK_INTERNAL)

dependencies:
  native-libs:
    type: git # type of dependency, decides procedure on how to use it
    source: https://github.com/hbirchtree/native-library-bundle.git # in case of git, online url
    root: $(dep.root)/native-libs # root is the native filesystem path
    target: /nativelibs # target is only used with containers
  rpi-sdk:
    type: git
    source: https://github.com/hbirchtree/raspberry-sysroot.git
    root: $(dep.root)/raspberry-sysroot
    target: /rpi-sysroot
  emscripten:
    type: empty
    root: $(dep.root)/emsdk_portable
    target: /home/coffee/emsdk_portable

build-dependencies:
  appimg-runtime:
    platforms: .*(ubuntu|fedora|raspberry|coverage|maemo).*
    source: git:https://github.com/AppImage/AppImageKit.git
    type: make
  assimp:
    platforms: ^[^d].*$
    source: git:https://github.com/assimp/assimp.git
    type: cmake
    cmake-opts:
      - -DASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT=OFF
      - -DASSIMP_BUILD_BLEND_IMPORTER=ON
      - -DASSIMP_BUILD_FBX_IMPORTER=ON
      - -DASSIMP_BUILD_COLLADA_IMPORTER=ON
      - -DASSIMP_BUILD_ASSIMP_TOOLS=OFF
      - -DASSIMP_BUILD_TESTS=OFF
      - -DBUILD_SHARED_LIBS=OFF
      - -DBUILD_TESTING=OFF
  glslang:
    platforms: .*(ubuntu|osx).*
    source: git:https://github.com/KhronosGroup/glslang.git
    type: cmake
    cmake-opts:
      - -DBUILD_TESTING=OFF
  bullet:
    platforms: ^[^d].*$
    source: git:https://github.com/bulletphysics/bullet3.git
    type: cmake
    cmake-opts:
      - -DBUILD_BULLET2_DEMOS=OFF
      - -DBUILD_UNIT_TESTS=OFF
      - -DBUILD_CPU_DEMOS=OFF
      - -DBUILD_EXTRAS=OFF
      - -DUSE_GRAPHICAL_BENCHMARK=OFF
      - -DINSTALL_LIBS=ON
  openal:
    platforms: ^[^d].*$
    source: git:https://github.com/kcat/openal-soft.git
    type: cmake
    cmake-opts:
      - -DALSOFT_EXAMPLES=OFF
      - -DALSOFT_TESTS=OFF
      - -DALSOFT_UTILS=OFF
  sdl2:
    platforms: .*(^[^d].*$|ubuntu|fedora|raspberry|coverage|mingw).*
    source: hg:https://hg.libsdl.org/SDL
    type: automake
    ac-opts:
#      - --host=$(host.arch)
      - --disable-shared
      - --disable-atomic
      - --disable-filesystem
      - --disable-threads
      - --disable-timers
      - --disable-audio
      - --disable-loadso
      - --disable-cpuinfo
      - --disable-video-vulkan
      - --prefix=$(build-dep.install)
  openssl:
    platforms: ^[^d].*$
    # There's a special place in hell for project-specific
    #  build processes like this one
    type: openssl
  squish:
    platforms: .*(ubuntu|osx).*
    type: make
    source: git:https://github.com/Cavewhere/squish.git
  shaderc:
    platforms: .*(ubuntu|osx).*
    type: cmake
    cmake-opts:
      - -DCMAKE_C_COMPILER=gcc
      - -DCMAKE_CXX_COMPILER=g++
      - -DSHADERC_SKIP_TESTS=ON
      - -DENABLE_HLSL=OFF
    source: git:https://github.com/hbirchtree/shaderc.git
  spirv-cross:
    platforms: .*(ubuntu|osx).*
    type: cmake
    cmake-opts:
      - -DCMAKE_CXX_FLAGS="-fPIC"
      - -DCMAKE_C_COMPILER=gcc
      - -DCMAKE_CXX_COMPILER=g++
    source: git:https://github.com/hbirchtree/SPIRV-Cross.git

# The following variables are defined in makefile-generator.py:
#  build-arch: target architecture, eg. ubuntu.amd64
#  dep-target: current build dependency, eg. sdl2, assimp
build-dep-template:
  .*:
    +container-opts:
      - -v $(build-dep.build-root):$(container.build):rw
      - -v $(bdep.root):$(container.src):ro
      - -v $(build-dep.install-root):$(container.install):rw
      - -v $(project.src)/cmake:/home/coffee/cmake-project:ro
      - --workdir $(container.build)
    =dependencies:
      - $(dep-target).source
      - $(dep-target).$(build-arch).build_dir
      - $(dep-target).$(build-arch).install_dir
    =target-name: $(dep-target).$(build-arch)
    =bdep.root: $(build-dep.root)/$(dep-target)/source
    =host.arch: x86_64-linux-gnu
    =toolchain-dir: $(cmake-project.src)
    =cmake.install: $(build-dep.install)
    =program.workdir: $(build-dep.build)
    ^make$:
      =container-opts:
        - -v $(bdep.root):$(container.src):rw
        - -v $(build-dep.install-root):$(container.install):rw
        - --workdir $(container.src)
  ^cmake$:
    =build.build-type: Release
    =cmake.src: $(build-dep.src)
    +cmake-opts:
      - -DCMAKE_BUILD_TYPE=$(build.build-type)
      - -DCMAKE_INSTALL_PREFIX=$(build-dep.install)
  ^automake$:
    =target: custom
    =program.exec: sh -c
    =program.arguments:
      - \'
      - cd $(build-dep.build) &&
      - $(build-dep.src)/configure $(automake.opts) &&
      - make -j4 &&
      - make install
      - \'
  ^make$:
    =target: custom
    =program.exec: sh
    =program.arguments:
      - -c
      - \'
      - mkdir -p $(container.install)/include $(container.install)/lib &&
      - make -f $(container.src)/Makefile -e CPPFLAGS=-fPIC -e INSTALL_DIR=$(container.install) install
      - \'

#
# Templates
# Apply variables based on regex matching in a tree
# Nodes starting with = overwrite a variable, + appends to a the variable's list
# Other nodes are branching regexes
# Regexes follow Python rules
# Some variables are only there for descriptive reasons
#
templates:
  =target: multi
  =cmake-target:
    - install
  =generator: Ninja
  =build-type: $(build.build-type)
  =preload: nothing.cmake
  =lib.flavor: $(target-name)
  =program.workdir: $(env:CMAKE_BUILD_DIR)
  
  # Default dependency
  =dependencies: native-libs
  
  # Default container options
  =container-opts: ''
  
  # Default CMake options
  =cmake-opts:
    - $(cmake.src)
    - -G'$(generator)'
    - -C$(toolchain-dir)/Preload/$(preload)
    - -DCMAKE_TOOLCHAIN_FILE=$(toolchain-dir)/Toolchains/$(toolchain)

  # unused, but links build dependencies to platforms
  =build-deps:
    - assimp
    - openal
    - bullet
    - openssl

  .*(osx|ios).*:
    =runner-choice: Makefile.mac-base
    =target: build
    =build.prettyname: Apple
    =generator: Xcode
    =compiler: Clang
    =cmake.src: $(project.src)
    =cmake.build: $(project.build)
    =cmake.install: $(project.install)
    =cmake.coffee-lib: $(lib.root)
    =cmake.native-lib: $(dependencies.native-libs.root)
    =build-dep.src: $(build-dep.src-root)
    =build-dep.install: $(build-dep.install-root)
    =build-dep.build: $(build-dep.build-root)
    =cmake-project.src: $(project.src)/cmake
    =program.workdir: $(project.build)/$(target-name)
    =container-opts:
    .*osx.*:
      =description: Apple OS X
      =flavor: mac-osx
      =toolchain: osx-generic_osx.toolchain.cmake
      =preload: osx-generic.cmake
      +cmake-opts:
        - -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
    .*ios.*:
      =toolchain: all-ios.toolchain.cmake
      =preload: osx-ios.cmake
    .*ios$:
      =description: Device-oriented build for ARM64 and ARMv7-A
    .*ios.x86.*:
      =description: iOS simulator build
      .*x86_64:
        +cmake-opts:
          - -DIOS_PLATFORM=SIMULATOR64
      .*x86$:
        +cmake-opts:
          - -DIOS_PLATFORM=SIMULATOR

  # namespacing, separating build options for Coffee-related builds
  #  from SDL2 and Assimp options
  # without this, Assimp would get a lot of trashy CMake options handed to it
  coffee.*:
    =toolchain-dir: $(cmake.src)/cmake
    +cmake-opts:
      - -DNATIVE_LIBRARY_DIR=$(cmake.native-lib)/$(build.prettyname)
      - -DNATIVE_LIBRARY_ROOT=$(cmake.native-lib)
      - -DCOFFEE_ROOT_DIR=$(cmake.coffee-lib)/$(lib.flavor)
      - -DGENERATE_PROGRAMS=$(env:GENERATE_PROGRAMS)
      - -DCOFFEE_BUILD_ASSIMP=ON
      - -DCMAKE_BUILD_TYPE=$(build.build-type)
      - -DCMAKE_INSTALL_PREFIX=$(cmake.install)/$(target-name)
      - -DSKIP_GRAPHIC_TESTS=$(env:HEADLESS)
    +container-opts:
      - -v $(dependencies.native-libs.root):$(dependencies.native-libs.target):ro
      - -v $(project.src):$(container.src):ro
      - -v $(project.install):$(container.install):rw
      - -v $(project.build)/$(target-name):$(container.build):rw
      - -v $(lib.root):$(lib.target):ro
      - --workdir "$(env:CMAKE_BUILD_DIR)"
    .*tools:
      +cmake-opts:
        - -DGENERATE_EXAMPLES=OFF
        - -DGENERATE_PROGRAMS=ON
        - -DGENERATE_TESTS=OFF
        - -DCOFFEE_GENERATE_FLATPAK=OFF
        - -DCOFFEE_GENERATE_SNAPPY=OFF
        - -DCOFFEE_GENERATE_APPIMAGE=ON
    .*coverage:
      =cmake-target:
        - all
        - CoverageTest@1
      =target: multi.twostage
    .*ubuntu.amd64.*:
      +cmake-opts:
        - -DMKSQUASH_PROGRAM=/usr/bin/mksquashfs
        - -DAPPIMAGE_RUNTIME_BINARY=$(env:NATIVE_LIBRARY_DIR)/$(build.prettyname)/util/x86_64-linux-gnu/runtime
        - -DCOFFEE_GENERATE_APPIMAGE=ON
    .*android.*:
      +cmake-opts:
        - -DCOFFEE_BUILD_GLES=ON
        - -DCOFFEE_BUILD_GLES_20=$(android.gles20)
        - -DCOFFEE_BUILD_ASSIMP=ON
        - -DCOFFEE_TESTS=OFF
        - -DCOFFEE_BUILD_SDL2=OFF
        - -DGENERATE_TESTS=OFF
      =target: multi.twostage
      =cmake-target:
        - install
        - AndroidPackage@1
    .*maemo.*:
      +cmake-opts:
        - -DCOFFEE_BUILD_ASSIMP=OFF

  # For Ubuntu, Fedora, docs and coverage, specify generic preload
  .*(ubuntu|docs|coverage|fedora).*:
    .*(amd64.*|docs|coverage):
      =container: ubuntu
    .*(amd64.*|docs|coverage|fedora):
      =toolchain: linux-generic_linux.toolchain.cmake
    +build-deps:
      - appimg-runtime
      - SDL2

  # Some parameters to make coverage testing work
  .*coverage:
    =description: Coverage build using same config as Ubuntu
    =compiler: Clang
    =preload: linux-coverage.cmake
    +container-opts:
      - -e CC=
      - -e CXX=

  .*docs:
    =description: Documentation build using only Doxygen
    =compiler: Doxygen
    =preload: docs-all.cmake
  
  .*ubuntu.*:
    =description: Ubuntu build in a Ubuntu Docker
    =compiler: GCC 5+
    =preload: linux-generic.cmake
    .*i686.*:
      =container: ubuntu-i686
      =toolchain: linux-generic-i686_linux.toolchain.cmake
    .*gles.*:
      =preload: linux-gles.cmake
    .*gles2:
      =preload: linux-gles20.cmake

  .*fedora.*:
    =description: Fedora build in a Fedora Docker
    =compiler: GCC 5+
    =preload: linux-fedora.cmake
    =container: fedora


  .*steam.*:
    =description: Build against the SteamRT SDK
    =compiler: GCC 4.8.4
    =preload: linux-steam.cmake
    =toolchain: linux-steam_linux.toolchain.cmake
    =container: steam


  .*emscripten.*:
    =description: Emscripten with WebAsm and asm.js
    =compiler: Clang 4+
    =container: emscripten
    =preload: js-emscripten.cmake
    =toolchain: js-emscripten.toolchain.cmake
    =generator: Unix Makefiles
    +cmake-opts:
      - -DEMSCRIPTEN_ROOT_PATH=$(dependencies.emscripten.target)/emscripten/master
    +container-opts:
      - -e EMSCRIPTEN=$(dependencies.emscripten.target)/emscripten/master
    .*wasm.*:
      =preload: js-emscripten-wasm.cmake


  .*android.*:
    =description: Android builds, ARMv8-A and ARMv7-A mostly
    =compiler: Clang
    # Architecture specifics
    .*armv8a.*:
      =android.abi: arm64-v8a
    .*armv7a.*:
      =android.abi: 'armeabi-v7a with NEON'
    .*armeabi.*:
      =android.abi: armeabi
    .*(x86\.).*:
      =android.abi: x86
    .*(x86_64).*:
      =android.abi: x86_64
    .*(mips\.).*:
      =android.abi: mips
    .*(mips64).*:
      =android.abi: mips64
    # Specifying native API level
    .*(jelly|kitkat).*:
      =android.api: 19
    .*(lollipop|marshmallow).*:
      =android.api: 21
    .*nougat.*:
      =android.api: 24
    # Graphical properties
    .*gles3.*:
      =android.gles20: OFF

    =android.toolchain: clang
    +cmake-opts:
      # Yay! Configuring the entire Android toolchain
      - -DANDROID_NDK=$(android.ndk)
      - -DANDROID_SDK=$(android.sdk)
      - -DANDROID_TOOLCHAIN=$(android.toolchain)
      - -DANDROID_STL=$(android.stl)
      - -DANDROID_PLATFORM=android-$(android.api)
      - -DANDROID_ABI='$(android.abi)'
      - -DANDROID_CPP_FEATURES=$(android.features)
      - -DANDROID_ARM_NEON=$(android.arm-neon)
    =container: android
    =toolchain: all-android.toolchain.cmake

    
  .*maemo.*:
    =description: Maemo 5 builds, performed within a Maemo 5 armel chroot
    =compiler: GCC 6
    =preload: linux-maemo.cmake
    =toolchain: linux-maemo-armv7_linux.toolchain.cmake
    =container: :hbirch/maemo-builder:v3
    =build.build-type: Release
    =target: multi.make8
    =generator: Unix Makefiles
    =container-opts: 
      - -v $(dependencies.native-libs.root):/maemo/$(dependencies.native-libs.target):ro
      - -v $(lib.root):/maemo/$(lib.target):ro
      - -v $(project.src):/maemo/$(container.src):ro
      - -v $(project.install):/maemo/$(container.install):rw
      - -v $(project.build)/$(target-name):/maemo/$(container.build):rw


  .*raspberry.*:
    =description: Raspberry Pi ARMv6 build
    =compiler: GCC 4.9
    =preload: linux-raspberry.cmake
    =toolchain: linux-raspberry-armhf_linux.toolchain.cmake
    =container: raspberry
    +dependencies: rpi-sdk
    +container-opts:
      - -v $(dependencies.rpi-sdk.root)/$(dependencies.rpi-sdk.path):$(dependencies.rpi-sdk.target):ro
    +cmake-opts:
      - -DRASPBERRY_SDK=$(dependencies.rpi-sdk.target)
    .*armhf.*:
      =dependencies.rpi-sdk.path: architectures/rpi-SDL2-X11-armv6


  .*mingw.*:
    =description: MinGW64 environment in Ubuntu Docker
    =compiler: GCC 5+
    =toolchain: windows-mingw64_linux.toolchain.cmake
    =preload: windows-mingw64.cmake
    =container: mingw64

  .*(ubuntu.*|coverage|docs):
    =build.prettyname: Ubuntu
  .*(fedora.*):
    =build.prettyname: Fedora
  .*(steam.*):
    =build.prettyname: SteamOS
  .*(maemo.*):
    =build.prettyname: Maemo
  .*(android.*):
    =build.prettyname: Android
  .*(raspberry.*):
    =build.prettyname: RaspberryPi
  .*(mingw.*):
    =build.prettyname: MinGW
  .*(emscripten.*):
    =build.prettyname: Emscripten
