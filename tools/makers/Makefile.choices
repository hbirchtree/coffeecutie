ROOT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
BUILD_DIR := $(PWD)

RASPBERRY_SYSROOT:=$(BUILD_DIR)/raspberry-sysroot
NATIVE_LIB_ROOT:=$(BUILD_DIR)/native-libs

RUNNER ?= Makefile.multi

ifeq ($(RUNNER),Makefile.multi)
	# Run using Docker
	CMAKE_NATIVE_LIB_DIR := /nativelibs
	EMSCRIPTEN_SDK := /home/coffee/emsdk_portable
	RASPBERRY_SDK := /rpi-sysroot
else
	# Run natively
	CMAKE_NATIVE_LIB_DIR := $(NATIVE_LIB_ROOT)
	EMSCRIPTEN_SDK := 
	RASPBERRY_SDK := $(RASPBERRY_SYSROOT)
endif

all:
	@true

# Compiles for Ubuntu 16.04+ amd64
ubuntu-amd64: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu -DMKSQUASH_PROGRAM=/usr/bin/mksquashfs -DAPPIMAGE_RUNTIME_BINARY=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu/util/x86_64-linux-gnu/runtime -DCOFFEE_GENERATE_APPIMAGE=ON" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

ubuntu-amd64-gles: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=ubuntu-amd64-gles \
		-e PRELOAD=linux-gles.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

ubuntu-amd64-gles20: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=ubuntu-amd64-gles20 \
		-e PRELOAD=linux-gles20.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

ubuntu-i686: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e DOCKER_CONFIG=ubuntu-i686 \
		-e BUILD_NAME=ubuntu-i686 \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e TOOLCHAIN=linux-generic-i686_linux.toolchain.cmake \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

ubuntu-i686-gles: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e DOCKER_CONFIG=ubuntu-i686 \
		-e BUILD_NAME=ubuntu-i686-gles \
		-e TOOLCHAIN=linux-generic-i686_linux.toolchain.cmake \
		-e PRELOAD=linux-gles.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

ubuntu-i686-gles20: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e DOCKER_CONFIG=ubuntu-i686 \
		-e BUILD_NAME=ubuntu-i686-gles20 \
		-e TOOLCHAIN=linux-generic-i686_linux.toolchain.cmake \
		-e PRELOAD=linux-gles20.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

# Compiles for latest Fedora amd64
fedora-amd64: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=fedora \
		-e BUILDER_NAME=fedora-builder \
		-e DOCKER_CONFIG=fedora \
		-e PRELOAD=linux-fedora.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Fedora" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro" \
		-e SOURCE_DIR=$(SOURCE_DIR) \
		-e BUILD_DIR=$(BUILD_DIR)

# Compiles for SteamOS amd64
steam-amd64: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=steam \
		-e BUILDER_NAME=steam-builder \
		-e DOCKER_CONFIG=steam \
		-e TOOLCHAIN=linux-steam_linux.toolchain.cmake \
		-e PRELOAD=linux-steam.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/SteamOS" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

# Provide coverage results for Ubuntu 16.04+ amd64 using lcov
coverage: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) multi.twostage \
		-e CMAKE_SECOND_TARGET=CoverageTest \
		-e BUILD_NAME=coverage \
		-e PRELOAD=linux-coverage.cmake \
		-e EXTRA_OPTIONS="-DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Ubuntu" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro -e CC= -e CXX="

# Generate documentation
docs: 
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=docs \
		-e PRELOAD=docs-all.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS)"

# Compiles for Emscripten using asm.js
emscripten-asmjs: native-lib-root 
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=emscripten-asmjs \
		-e BUILDER_NAME=emscripten-builder \
		-e DOCKER_CONFIG=emscripten \
		-e TOOLCHAIN=js-emscripten.toolchain.cmake \
		-e PRELOAD=js-emscripten.cmake \
		-e CMAKE_GEN="Unix\ Makefiles" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro -e EMSCRIPTEN=$(EMSCRIPTEN_SDK)/emscripten/master" \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Emscripten -DEMSCRIPTEN_ROOT_PATH=$(EMSCRIPTEN_SDK)/emscripten/master"

# Compiles for Emscripten using WebAssembly
emscripten-wasm: native-lib-root 
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=emscripten-wasm \
		-e BUILDER_NAME=emscripten-builder \
		-e DOCKER_CONFIG=emscripten \
		-e TOOLCHAIN=js-emscripten.toolchain.cmake \
		-e PRELOAD=js-emscripten-wasm.cmake \
		-e CMAKE_GEN="Unix\ Makefiles" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro -e EMSCRIPTEN=$(EMSCRIPTEN_SDK)/emscripten/master" \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/Emscripten -DEMSCRIPTEN_ROOT_PATH=$(EMSCRIPTEN_SDK)/emscripten/master"

mingw-w64: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=mingw-w64 \
		-e DOCKER_CONFIG=mingw64 \
		-e PRELOAD=windows-mingw64.cmake \
		-e TOOLCHAIN=windows-mingw64_linux.toolchain.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/MinGW" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"

# Compiles for Raspberry Pi armhf/ARMv6
raspberry-armhf: $(RASPBERRY_SYSROOT) native-lib-root 
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=raspberry \
		-e BUILDER_NAME=raspberry-builder \
		-e DOCKER_CONFIG=raspberry \
		-e TOOLCHAIN=linux-raspberry-armhf_linux.toolchain.cmake \
		-e PRELOAD=linux-raspberry.cmake \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(RASPBERRY_SYSROOT)/architectures/rpi-SDL2-X11-armv6:$(RASPBERRY_SDK):ro -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro" \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/RaspberryPi -DRASPBERRY_SDK=$(RASPBERRY_SDK)"

# Compiles for Maemo 5 armel/ARMv7A
maemo-armel: native-lib-root
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=maemo \
		-e BUILDER_NAME=maemo-builder \
		-e TOOLCHAIN=linux-maemo-armv7_linux.toolchain.cmake \
		-e PRELOAD=linux-maemo.cmake \
		 \
		-e DOCKER_CONTAINER="hbirch/maemo-builder:v3" \
		-e DOCK_SRC="/maemo/home/coffee/project" \
		-e DOCK_BUILD="/maemo/home/coffee/build" \
		-e DOCK_OUT="/maemo/home/coffee/build/out" \
		\
		-e DOCK_PRLDS="/home/coffee/project/cmake/Preload" \
		-e DOCK_TOOLS="/home/coffee/project/cmake/Toolchains" \
		-e CMAKE_SRC_DIR="/home/coffee/project" \
		-e CMAKE_BLD_DIR="/home/coffee/build" \
		-e CMAKE_OUT_DIR="/home/coffee/build/out" \
		-e CMAKE_GEN="Unix\ Makefiles" \
		-e BUILD_TYPE=Release \
		\
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIB_ROOT=$(CMAKE_NATIVE_LIB_DIR)/Maemo5" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):/maemo$(CMAKE_NATIVE_LIB_DIR):ro" \
		\
		multi.make8

# Compiles for Native Client/PNaCL
nacl-pnacl: native-lib-root 
	@make -f $(ROOT_DIR)/$(RUNNER) \
		-e BUILD_NAME=nacl \
		-e BUILDER_NAME=nacl-builder \
		-e DOCKER_CONFIG=native-client \
		-e TOOLCHAIN=linux-nativeclient_linux.toolchain.cmake \
		-e PRELOAD=linux-nativeclient.cmake \
		-e EXTRA_OPTIONS="$(EXTRA_OPTIONS) -DNATIVE_LIBRARY_DIR=$(CMAKE_NATIVE_LIB_DIR)/NaCL" \
		-e DOCKER_EXTRA_OPTIONS="$(DOCKER_EXTRA_OPTIONS) -v $(NATIVE_LIB_ROOT):$(CMAKE_NATIVE_LIB_DIR):ro"
		
# Android builds, multi-arch and stuff
android: 
	@make -f $(ROOT_DIR)/Makefile.android \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)
# Specific platforms for Android
android.armv8a: 
	@make -f $(ROOT_DIR)/Makefile.android android.target \
		-e TARGET=arm64_nougat \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)
android.armv7a: 
	@make -f $(ROOT_DIR)/Makefile.android android.target \
		-e TARGET=armv7a_neon_latest \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)
android.armv7a.kk: 
	@make -f $(ROOT_DIR)/Makefile.android android.target \
		-e TARGET=armv7a_neon_kk \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)
android.x86_64: 
	@make -f $(ROOT_DIR)/Makefile.android android.target \
		-e TARGET=x86-64_kk \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)
android.x86: 
	@make -f $(ROOT_DIR)/Makefile.android android.target \
		-e TARGET=x86_kk \
		-e DOCKER_EXTRA_OPTIONS=$(DOCKER_EXTRA_OPTIONS) \
		-e EXTRA_OPTIONS=$(EXTRA_OPTIONS)


native-lib-root:
	@test ! -d $(NATIVE_LIB_ROOT) && \
	mkdir $(NATIVE_LIB_ROOT) && \
	git clone \
		--depth=1 \
		"https://github.com/hbirchtree/native-library-bundle.git" \
		$(NATIVE_LIB_ROOT) || \
	true

$(RASPBERRY_SYSROOT):
	@test ! -d $(RASPBERRY_SYSROOT) && \
	mkdir $(RASPBERRY_SYSROOT) && \
	git clone \
		--depth=1 \
		"https://github.com/hbirchtree/raspberry-sysroot.git" \
		$(RASPBERRY_SYSROOT) || \
	true

