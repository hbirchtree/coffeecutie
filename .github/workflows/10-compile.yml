name: CMake Build
'on':
  push:
    branches:
    - master
    - testing
    - feature**
    tags: '*'
jobs:
  Release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Printing some info
      run: echo "Received ref $GITHUB_REF"
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      run: gh release create ${GITHUB_REF:10} -R ${{ github.repository }} -p -t "Automatic
        Release ${GITHUB_REF:10}" -n "Automatically generated by Actions" --target
        ${{ github.sha }}
  Linux:
    runs-on: ubuntu-latest
    needs: Release
    strategy:
      fail-fast: false
      matrix:
        include:
        - variant: android:arm-neon:19
          artifact: android-arm-neon-19
          mode: dbg
        - variant: android:arm64:30-gl
          artifact: android-arm64-30-gl
          mode: dbg
        - variant: android:arm64:32
          artifact: android-arm64-32
          mode: dbg
        - variant: beaglebone:arm-buildroot-linux-gnueabihf:ti-sgx
          artifact: beaglebone-arm-buildroot-linux-gnueabihf-ti-sgx
          mode: dbg
        - variant: desktop:aarch64-buildroot-linux-gnu:multi
          artifact: desktop-aarch64-buildroot-linux-gnu-multi
          mode: dbg
        - variant: desktop:arm-buildroot-linux-gnueabihf:sdl2
          artifact: desktop-arm-buildroot-linux-gnueabihf-sdl2
          mode: dbg
        - variant: desktop:x86_64-buildroot-linux-gnu:multi
          artifact: desktop-x86_64-buildroot-linux-gnu-multi
          mode: dbg
        - variant: desktop:x86_64-w64-mingw32:posix
          artifact: desktop-x86_64-w64-mingw32-posix
          mode: dbg
        - variant: web:wasm32-emscripten:webgl2
          artifact: web-wasm32-emscripten-webgl2
          mode: rel
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: ${{ matrix.variant }} ${{ matrix.mode }}
    steps:
    - uses: lukka/get-cmake@latest
    - uses: actions/checkout@v4
      with:
        submodules: true
        path: source
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - uses: actions/setup-java@v4
      if: startsWith(matrix.variant, 'android:')
      with:
        distribution: 'adopt'
        java-version: '17'
    - name: Installing build-essential
      run: sudo apt install build-essential inkscape flatpak nasm squashfs-tools
    - name: Host tools cache
      uses: actions/cache@v4
      with:
        path: source/multi_build/host-x64-linux-native
        key: host-tools-${{ runner.os }}-${{ hashFiles('source/tools') }}
    - name: Building host tools
      run: source/cb host-build
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Building project
      id: buildProject
      continue-on-error: true
      run: BUILD_TYPE=${{ matrix.mode }} source/cb build ${{matrix.variant}}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Upload vcpkg logs
      if: steps.buildProject.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.artifact}}-vcpkg-logs
        path: /usr/local/share/vcpkg/buildtrees/*/*.log
    - name: Build validation
      if: steps.buildProject.outcome == 'failure'
      run: false
    - name: Uploading artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.artifact}}
        path: |
          source/multi_build/${{matrix.artifact}}/bin
          source/multi_build/${{matrix.artifact}}/lib
          !source/multi_build/${{matrix.artifact}}/lib/*.a
          source/multi_build/${{matrix.artifact}}/packaged
        if-no-files-found: error
  macOS:
    runs-on: macos-latest
    needs: Release
    strategy:
      fail-fast: false
      matrix:
        include:
        - variant: desktop:x86_64-darwin:macos
          artifact: desktop-x86_64-darwin-macos
          mode: dbg
        - variant: desktop:universal-darwin:macos
          artifact: desktop-universal-darwin-macos
          mode: dbg
        - variant: ios:x86_64-darwin:simulator
          artifact: ios-x86_64-darwin-simulator
          mode: dbg
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    name: ${{ matrix.variant }}
    steps:
    - uses: lukka/get-cmake@latest
    - uses: actions/checkout@v4
      with:
        submodules: true
        path: source
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - name: Installing Inkscape
      run: brew install --cask inkscape
    - name: Building host tools
      run: source/cb host-build
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Building project
      id: buildProject
      run: BUILD_TYPE=${{ matrix.mode }} source/cb build ${{matrix.variant}}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Creating archive of artifacts
      run: tar cvf apps.tar source/multi_build/${{matrix.artifact}}/bin
    - name: Uploading artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.artifact}}
        path: apps.tar
        if-no-files-found: error
  Deploy:
    if: ${{ always() }}
    needs: Linux
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: Gathering artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    - name: Generating GitHub Pages archive
      run: |
        mkdir -p _site/downloads/
        curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/artifacts -o _site/artifacts.json
        cp -r artifacts/web-wasm32-emscripten-webgl2/bin _site/
        for f in $(find artifacts/ -mindepth 1 -maxdepth 1); do pushd $f; tar Jcvf ../../_site/downloads/$(basename $f).tar.xz .; popd; done
    - name: Uploading GitHub Pages examples
      uses: actions/upload-pages-artifact@v3
    - name: Deploy examples to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
