name: CMake Build
'on':
  push:
    branches:
    - master
    - testing
    - feature**
    tags: '*'
jobs:
  Release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - name: Printing some info
      run: echo "Received ref $GITHUB_REF"
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      run: gh release create ${GITHUB_REF:10} -R ${{ github.repository }} -p -t "Automatic
        Release ${GITHUB_REF:10}" -n "Automatically generated by Actions" --target
        ${{ github.sha }}
  Linux:
    runs-on: ubuntu-latest
    needs: Release
    strategy:
      fail-fast: false
      matrix:
        include:
        - variant: android:arm64:30-gl
          artifact: android-arm64-30-gl
        - variant: android:arm64:32
          artifact: android-arm64-32
        - variant: beaglebone:arm-buildroot-linux-gnueabihf:ti-sgx
          artifact: beaglebone-arm-buildroot-linux-gnueabihf-ti-sgx
        - variant: desktop:aarch64-buildroot-linux-gnu:multi
          artifact: desktop-aarch64-buildroot-linux-gnu-multi
        - variant: desktop:arm-buildroot-linux-gnueabihf:sdl2
          artifact: desktop-arm-buildroot-linux-gnueabihf-sdl2
        - variant: desktop:x86_64-buildroot-linux-gnu:multi
          artifact: desktop-x86_64-buildroot-linux-gnu-multi
        - variant: desktop:x86_64-windows-gnu:win32
          artifact: desktop-x86_64-windows-gnu-win32
        - variant: web:wasm32-emscripten:webgl2
          artifact: web-wasm32-emscripten-webgl2
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: lukka/get-cmake@latest
    - uses: actions/checkout@v2
      with:
        submodules: true
        path: source
    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    - uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '17'
    - name: Installing build-essential
      run: sudo apt install build-essential inkscape flatpak nasm squashfs-tools
    - name: Installing MinGW-W64 tools
      if: matrix.variant == 'desktop:x86_64-windows-gnu:win32'
      run: sudo apt install mingw-w64-tools mingw-w64-x86-64-dev
    - name: Building host tools
      run: source/cb build host-x64-linux-native
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Building project
      run: source/cb build ${{matrix.variant}}
      env:
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
    - name: Copying over winpthread for MinGW-W64
      if: matrix.variant == 'desktop:x86_64-windows-gnu:win32'
      run: cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll source/multi_build/desktop-x86_64-windows-gnu-win32/bin
    - name: Generate artifacts
      run: |
        NORMALIZED_NAME=${{matrix.variant}}
        NORMALIZED_NAME=${NORMALIZED_NAME//:/-}
        BUILD_DIR=source/multi_build/${NORMALIZED_NAME}
        OUT_FILE=$(pwd)/${NORMALIZED_NAME}.tar.xz
        cd ${BUILD_DIR}
        tar -Jcvf ${OUT_FILE} $(ls bin lib/*.so* packaged)
    - name: Uploading artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.artifact}}
        path: '*.tar.xz'
        if-no-files-found: error
