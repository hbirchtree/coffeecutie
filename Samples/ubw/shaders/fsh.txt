#version 330

uniform mat4 model;
uniform mat4 camera;
uniform vec3 cameraPosition;

// material settings
uniform sampler2D materialTex;
uniform float materialShininess;
uniform float materialTransparencyValue;
uniform vec3 materialSpecularColor;
//uniform vec3 materialDiffuseColor;

uniform struct Light {
   vec3 position;
   vec3 intensities; //a.k.a the color of the light
   float attenuation;
   float ambientCoefficient;
} light;

uniform struct FogParams {
	float fDensity;
	vec4 fColor;
} fogParams;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;
in vec3 fragTangent;
in float fogCoord;

layout(location = 0) out vec4 finalColor;

void main() {
    vec3 normal = normalize(transpose(inverse(mat3(model))) * fragNormal);
    vec3 surfacePos = vec3(model * vec4(fragVert, 1));
    vec4 eyePos = model * vec4(fragVert,1.0);
    vec4 surfaceColor = texture(materialTex, fragTexCoord);
    vec3 surfaceToLight = normalize(light.position - surfacePos);
    vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
    
    //ambient
    vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

    //diffuse
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;
//    vec3 diffuse = diffuseCoefficient * vec3(0.5,0.7,0.5) * light.intensities;

    
    //specular
    float specularCoefficient = 0.0;
    if(diffuseCoefficient > 0.0)
        specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialShininess);
    vec3 specular = specularCoefficient * materialSpecularColor * light.intensities;
    
    //attenuation
    float distanceToLight = length(light.position - surfacePos);
    float attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

    //linear color (color before gamma correction)
    vec3 linearColor = ambient + attenuation*(diffuse + specular);
    
    //gamme correction
    vec3 gamma = vec3(1.0/2);
    linearColor = pow(linearColor, gamma);
    
    //fog
    float fogCoord = abs(length(cameraPosition-eyePos.xyz)/eyePos.w);
    float fogVar = clamp(exp(-pow(fogParams.fDensity*fogCoord,7)),0.0,1.0);
    linearColor = mix(fogParams.fColor.xyz,linearColor,fogVar);
    
    //final color (after gamma correction)
    finalColor = vec4(linearColor, surfaceColor.a*materialTransparencyValue);
}
