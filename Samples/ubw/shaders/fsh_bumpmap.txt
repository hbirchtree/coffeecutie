#version 330

uniform mat4 model;
uniform vec3 cameraPosition;

// material settings
uniform sampler2D materialTex;
uniform sampler2D materialBump;
uniform sampler2D materialSpecular;
uniform sampler2D materialTransparency;
uniform sampler2D materialHighlight;
uniform float materialShininess;
uniform float materialTransparencyValue;
uniform vec3 materialSpecularColor;
uniform vec3 cameraRightVec;

uniform struct Light {
   vec3 position;
   vec3 intensities; //a.k.a the color of the light
   float attenuation;
   float ambientCoefficient;
} light;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;
in vec3 fragTangent;

out vec4 finalColor;

vec3 bumpedNormal(){
    vec4 normalColor = texture(materialBump,fragTexCoord);
    vec3 normalStatic = normalize(transpose(inverse(mat3(model))) * fragNormal);
    vec3 normal = 2.0 * normalColor.rgb - 1.0;
    vec3 tangent = vec3(model * vec4(fragTangent,0));
    vec3 bitang = cross(tangent,normalStatic);
    tangent = normalize(tangent - dot(tangent,normalStatic)*normalStatic);
    mat3 TBN = mat3(tangent,bitang,normalStatic);
    normal = TBN * normal;
    normal = normalize(normal);
    
    return normal;
}

void main() {
	//Stuff
    vec3 surfacePos = vec3(model * vec4(fragVert, 1));
    vec4 surfaceColor = texture(materialTex, fragTexCoord);
    vec3 surfaceToLight = normalize(light.position - surfacePos);
    vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
    vec3 normal = bumpedNormal();
    
    //transparency map
    float pixelTransparency = texture(materialTransparency,fragTexCoord).a;
    
    //highlight map
    float pixelShininess = dot(texture(materialHighlight,fragTexCoord).rgb,vec3(1.0,1.0,1.0))/3.0;
    
    //specular map
    vec3 pixelSpecularColor = normalize(texture(materialSpecular,fragTexCoord).rgb*2.0-1.0);
    
    //ambient
    vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

    //diffuse
//    vec3 lightVec = cross(,surfaceToLight);
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;
    
    //specular
    float specularCoefficient = 0.0;
    if(diffuseCoefficient > 0.0)
        specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), pixelShininess*materialShininess);
    vec3 specular = specularCoefficient * materialSpecularColor * pixelSpecularColor * light.intensities;
    
    //attenuation
    float distanceToLight = length(light.position - surfacePos);
    float attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

    //linear color (color before gamma correction)
    vec3 linearColor = ambient + attenuation*(diffuse + specular);
    
    //final color (after gamma correction)
    vec3 gamma = vec3(1.0/2.2);
    finalColor = vec4(pow(linearColor, gamma), pixelTransparency);
    
    
}
