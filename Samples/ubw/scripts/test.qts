var world;
var controller;
var assets;
var objStack;

	assets = factory.importAssets("ubw/ubw.json");
	coffeeroot.evloop.world = assets.worlds[0];
	assets.worlds[0].setRenderer(renderer);
	assets.worlds[0].connectSignals(coffeeroot.evloop.cameracontrol);
	renderer.contextReportFrametime.connect(assets.worlds[0].tickObjects);

#inc "var-defs.qts"
#inc "shader-setup.qts"
#inc "event-handling.qts"

	world.lights[0].position.bindValue(world.camera.position);
	renderer.contextReportFrametime.connect(world.testparts.setFrametime);

	{
		var objects = [world.gear, world.plane, world.blade];

		for(var i=0;i<objects.length;i++){
			objStandardInitShader(objects[i]);
		}
	}

	objStack = new Array();

	function addNewGear(mass,shape){
		//Create instance, create physics-object, bind them and see what happens.
		var i = world.gear.mesh.instances.instanceObjects.length;
		world.gear.mesh.instances.createInstance();
		var desc = new PhysicsDescriptor();
		var pobj = new PhysicsObject();
		desc.setShape(shape);
		desc.mass = mass;
		pobj.setDescr(desc);

		world.injectPhysicsObject(pobj);
		world.gear.mesh.instances.instanceObjects[i].bindObject(pobj);

		objStack.push(desc);
		objStack.push(pobj);
	}


	var target = world.blade.physics;
	var testProp = new CoffeePhysicsEvent();
	testProp.type = PhysicsProperty.ActionApplyForce;
	var vec = new VectorVariant();
	vec.vec3 = [0,100,0];
	testProp.data = [vec];
	testProp.addTarget(target);
	target.modifyPhysics(testProp);

	world.plane.rotation.value = [2,-3,0,0];
	world.fogDensity = 0;
	world.lights[0].attenuation = 0.00003;

{
	var gear = world.gear.mesh;
	gear.useInstancing = true;
	gear.instances.createInstance();
	gear.instances.createInstance();
	gear.instances.createInstance();

	function modifyGear(index,size, pos){
		gear.instances.instanceObjects[index].scale.value = [size,size,size];
		gear.instances.instanceObjects[index].position.value = pos;
	}

	modifyGear(0,60,[100,100,100]);
	modifyGear(1,40,[10,166,100]);
}
function rotateGear1(){
	world.gear.mesh.instances.instanceObjects[1].rotation.mathCumulate([1,0,0,0.001]);
}
function rotateGear2(){
	world.gear.mesh.instances.instanceObjects[0].rotation.mathCumulate([1,0,0,-0.001]);
}

var anim = new QTimer;
anim.interval = 5;
anim.timeout.connect(rotateGear1);
anim.timeout.connect(rotateGear2);
anim.start();
