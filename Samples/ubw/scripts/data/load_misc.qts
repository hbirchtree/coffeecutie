function _asset_getTexture(str,src){
	for(var i = 0; i<src.textures.length;i++){
		if(src.textures[i].objectName === str){
			return src.textures[i];
		}
	}
	return null;
}

function _load_object_light(src,parent){
	var light = new CoffeeOmniLight(parent);
	for(p in src){
		switch(p){
		case "position":{
			light.position.value = src[p];
			break;
		}
		case "color":{
			light.color.value = src[p];
			break;
		}
		case "ambient-coefficient":{
			light.ambientCoefficient.value = src[p];
			break;
		}
		case "attenuation":{
			light.attenuation.value = src[p];
			break;
		}
		}
	}
	return light;
}

function _load_object_camera(src,parent){
	var camera = new CoffeeCamera(parent);
	for(p in src){
		switch(p){
			case "fov":{
				camera.fov.value = src[p];
				break;
			}
			case "znear":{
				camera.zNear = src[p];
				break;
			}
			case "zfar":{
				camera.zFar = src[p];
				break;
			}
			case "position":{
				camera.position.value = src[p];
				break;
			}
			case "rotation":{
				camera.rotation.value = src[p];
				break;
			}
		}
	}
	return camera;
}

function _load_object_fog(src,world){
	//Only sets the fog parameters in the world object for now
	//We might separate fog into its own, script-side entity
	for(p in src){
		switch(p){
			case "density":{
				world.fogDensity = src[p];
				break;
			}
			case "color":{
				world.fogColor.fromColor(QColor(src[p]));
				break;
			}
		}
	}
}

function _load_object_skybox(src,camera,parent,assetSource){
	var skybox = new CoffeeSkybox(parent,camera);
	for(p in src){
		switch(p){
			case "id":{
				skybox.objectName = src[p];
				break;
			}
			case "shader":{
				skybox.shader = assetSource.shaders[src[p]];
				break;
			}
			case "mesh":{
				skybox.mesh = assetSource.getMesh(src[p]);
				break;
			}
			case "cubemap":{
				skybox.texture = _asset_getTexture(src[p],assetSource);
				break;
			}
		}
	}

	skybox.setUniform("wvp",skybox.skyboxMatrix);
	skybox.setTexture("cubemapTexture",skybox.texture);

	return skybox;
}

function _load_object_particles(src,camera,parent,assetSource){
	var ps = new CoffeeParticleSystem(parent,camera);
	ps.setCamera(camera);
	for(p in src){
		switch(p){
			case "id":{
				ps.objectName = src[p];
				break;
			}
			case "render-shader":{
				ps.shader = assetSource.shaders[src[p]];
				break;
			}
			case "particle-mass":{
				ps.particleMass.value = src[p];
				break;
			}
			case "particle-size":{
				ps.particleSize.value = src[p];
				break;
			}
			case "gravity":{
				ps.gravity.value = src[p];
				break;
			}
//			case "position":{
//				ps.position.value = src[p];
//				break;
//			}
			case "particle-spread":{
				ps.particleSpread.value = src[p];
				break;
			}
//			case "color":{
//				ps.particleColor.fromColor(QColor(src[p]));
//				break;
//			}
			case "additive":{
				ps.additive = src[p];
				break;
			}
			case "transform-shader":{
				var id = src[p];
				ps.transform.shader = assetSource.shaders[id];
				break;
			}
			case "texture":{
				ps.texture = _asset_getTexture(src[p],assetSource);
				break;
			}
		}
	}
	return ps;
}
