#!/bin/bash

BASE_DIR=$(dirname ${0})
TC_DIR=${BASE_DIR}/toolchain

function all_source_files()
{
  find ${BASE_DIR}/src/coffee ${BASE_DIR}/src/include -regex '.*\.\(cpp\|h\)' -type f $@      
}

case $1 in
"quick-build")
    ${TC_DIR}/quick-build.sh ${@:2}
;;
"ci")
    ${TC_DIR}/configure_ci.py ${@:2}
;;
"version")
    ${TC_DIR}/version.py ${@:2}
;;
"build-info")
    ${TC_DIR}/buildinfo.py ${@:2}
;;
"extract-tools")
    ${TC_DIR}/extract-tools.sh ${@:2}
;;
"extract-native-libs")
    ${TC_DIR}/extract-native-libs.sh ${@:2}
;;
"generate-project")
    ${TC_DIR}/generate_project.py ${@:2}
;;
"update-local-tools")
    ${TC_DIR}/update-local-tools.sh ${@:2}
;;
"gen-release")
    ${TC_DIR}/git-gen-release.sh ${@:2}
;;
"makefile-generator")
    MAKERS_DIR=${BASE_DIR}
    case $2 in
    "regen")
        case $3 in
        "linux")
            ${TC_DIR}/python/makefile-generator.py ${TC_DIR}/makers/targets.yml ${TC_DIR}/makers/Makefile.$3
        ;;
        *)
            echo \
"Options: 
linux - Generate for Linux and OSX, despite the name"
        ;;
        esac
    ;;
    *)
        echo \
"Options: 
regen - Regenerate meta-build system"
    ;;
    esac
;;
"format")
    if [ -z $CLANG_FORMAT ]; then
        CLANG_FORMAT=clang-format   
    fi
    if [ -z $2 ]; then
        all_source_files
    else
        all_source_files -exec $CLANG_FORMAT -style=file $2 {} \;
    fi
;;
"include-guards")
   function detect_ifndef_guard()
    {
        if [ ! -z "$(head -1 $@ | grep '#ifndef ')" ]; then
            echo $@
        fi
    }
  
    for f in $(all_source_files); do
        detect_ifndef_guard $f
    done
;;
"platform-guards")
    function detect_platform_guards()
    {
        grep '^#if' $@ /dev/null | egrep 'defined[ ]*\([ ]*COFFEE_[A-Za-z]+\)'
    }
    for f in $(all_source_files); do
        detect_platform_guards $f
    done
;;
*)
echo "Available tools: 

Project management:
    generate-project    - Generate a new project directory

Build tools:
    quick-build         - Use pre-defined build environments
    extract-tools       - Extract compiled tools into deployment directory
    extract-native-libs - Extract compiled libraries into deployment directory
    makefile-generator  - Regenerate meta-build system

CI/CD tools:
    ci                  - Generate CI files
    version             - Manage project version
    build-info          - Extract information from .build.yml
    gen-release         - Generate Git tag and push to Git remote

Code tools:
    format              - Format code according to .clang-format
    include-guards      - Detect files not using '#pragma once'
    platform-guards     - Find usages of platform guards in code
    "
;;
esac
