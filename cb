#!/bin/bash

[ -z $CI ] && set -euf -o pipefail

BUILD_CI=${BUILD_CI:-}

if [[ "$0" = /* ]]; then
    SELF=$0
    BASE_DIR=$(dirname $0)
else
    SELF=$PWD/$0
    BASE_DIR=${PWD}/$(dirname "${0}")
fi
TC_DIR=${BASE_DIR}/toolchain

source $BASE_DIR/toolchain/building.sh

function all_source_files()
{
    local SRC_BASE_DIR=$(dirname "${0}")
    find "${SRC_BASE_DIR}"/src/coffee "${SRC_BASE_DIR}"/src/include -regex '.*\.\(cpp\|h\)' -type f $@      
}

case $1 in
"build")
    ${0} $(echo $2 | cut -d: -f 1)-build ${@:2}
;;
"desktop-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified, example targets:
  beaglebone:arm-buildroot-linux-gnueabihf:nullws
  generic:arm-buildroot-linux-gnueabihf:wayland
  desktop:x86_64-buildroot-linux-gnu:multi
  raspberry:arm-buildroot-linux-gnueabihf:vc
"
    fi
    native_build ${@:2}
;;
"web-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified, example targets:
  web:wasm32-emscripten:webgl2
  web:wasm32-emscripten:webgl1
  web:wasm32-emscripten:node
"
    fi
    emscripten_build ${@:2}
;;
"xcode-build")
    xcode_build ${@:2}
;;
"android-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified, example targets:
  android:arm64:32 (Targeting Android 13)
  android:arm64:29 (Targeting Android 10)
  android:arm-neon:19 (Targeting Android 4.4)
"
        exit 0
    fi
    android_build ${@:2}
;;
"windows-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified, example targets:
  windows:x86_64-w64-mingw32:win32
"
    fi
    mingw_build ${@:2}
;;
"console-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "Available targets:
  console:powerpc-eabi:gamecube
  console:powerpc-eabi:wii
"
        exit 0
    fi
    native_build ${@:2}
;;
"compress-usr-dir")
    echo "::group::Compressing install directory"
    INSTALL_DIR=$PWD/build/install

    if [ -f "${BASE_DIR}/deploy-script.sh" ]; then
        echo "-- Using customized deploy script"
        source ${BASE_DIR}/deploy-script.sh
    else
        OUTPUT=$PWD/${2}_${BUILDVARIANT}.tar.bz2
        echo "-- Creating $OUTPUT from $INSTALL_DIR"

        echo "-- Current directory: $(pwd)"

        echo "-- Source dir: ${BASE_DIR}"
        ls ${BASE_DIR}
        echo "-- Build dir: $PWD/build"
        ls $PWD/build
        echo "-- Install dir: ${INSTALL_DIR}"
        ls ${INSTALL_DIR}

        pushd ${INSTALL_DIR}
        case $2 in
        "bin")
            tar cvf ${OUTPUT} \
                --exclude=${INSTALL_DIR}/include \
                --exclude=${INSTALL_DIR}/lib \
                --exclude=${INSTALL_DIR}/share \
                ${INSTALL_DIR}
        ;;
        "libraries")
            tar cvf ${OUTPUT} \
                --exclude=${INSTALL_DIR}/bin \
                --exclude=${INSTALL_DIR}/packaged \
                ${INSTALL_DIR}
        ;;
        *)
            echo "-- Unhandled case $2"
        ;;
        esac
        popd
    fi
    echo "::endgroup::"
;;
"push-asset")
    echo "::group::Pushing asset"
    TAG_NAME=$(git tag --points-at HEAD)

    if [ -z "$TAG_NAME" ]; then
        echo "::debug::Tag not found, not pushing"
        echo "::endgroup::"
        exit 0
    fi

    for FILE in $(find . -maxdepth 1 -type f -name '*.'$2); do
        gh release upload -R "$GITHUB_REPOSITORY" "$TAG_NAME" "$FILE" --clobber
    done
    echo "::endgroup::"
;;
"lint")
    echo "::group::Lint"
    echo "NEEDS REIMPLEMENTATION"
    echo "::endgroup::"
;;
"lint-cmake")
    echo "::group::Linting CMake files"
    cmake-format -i -c ${BASE_DIR}/.cmake-format ${BASE_DIR}/{examples,src,tests,toolchain,tools}
    echo "::endgroup::"
;;
"lint-file")
    FILE_IN=$(realpath ${2})

    pushd ${BASE_DIR}

    echo "NEEDS REIMPLEMENTATION"

    #echo "::warning file=${FILE_IN}::${DIFF}"

    popd
;;
"list-targets")
    ls -1 $BASE_DIR/.github/cmake/ | sed 's/.preload.cmake//g'
    echo "
To build a target, execute $0 quick-build [target]"
;;
"ci")
    "${TC_DIR}"/configure_ci.py ${@:2}
;;
"version")
    "${TC_DIR}"/version.py ${@:2}
;;
"build-info")
    "${TC_DIR}"/buildinfo.py ${@:2}
;;
"generate-project")
    "${TC_DIR}"/generate_project.py ${@:2}
;;
"gen-release")
    set -e
    ${0} version ${@:2}
    git -C "${BASE_DIR}" add "${BASE_DIR}"/.build.yml
    git commit --verbose
    "${TC_DIR}"/git-gen-release.sh none
;;
"makefile-generator")
    pushd "${TC_DIR}"/makers
    PYTHONPATH=$TC_DIR "${TC_DIR}"/python/make_all.py
    popd
;;
"format")
    CLANG_FORMAT=$(CLANG_FORMAT:-clang-format)
    if [ -z "$2" ]; then
        all_source_files
    else
        all_source_files -exec $CLANG_FORMAT -style=file "$2" {} \;
    fi
;;
"type-guards")
    for f in $(all_source_files); do
        grep -E '(u|)int(8|16|32|64)' "$f" /dev/null
    done
;;
"query-source")
    for f in $(all_source_files); do
        git grep -E "$2"
    done
;;
"get-notes")
    for f in $(all_source_files); do
        git grep -E  '(//|/\*)\s?(TODO|NOTE|WARNING|BUG|FIXME)'
    done
;;
*)
echo "Available tools: 

Project management:
    generate-project    - Generate a new project directory

Build tools:
    desktop-build       - Builds Linux targets natively without containers or host setup
                          By default downloads a toolchain as specified in .build.yml
                          Specify a custom path using TOOLCHAIN_ROOT
    web-build           - Builds WebAssembly targets natively without containers or host setup
                          By default downloads the emsdk version as specified in .build.yml
                          Specify a custom path using TOOLCHAIN_ROOT
    android-build       - Build Android target natively, options between x86-based and ARM-based targets
    xcode-build         - Builds macOS/iOS targets natively
    list-targets        - List all available targets for building
    makefile-generator  - Regenerate meta-build system

CI/CD tools:
    ci                  - Generate CI files
    version             - Manage project version
    build-info          - Extract information from .build.yml
    gen-release         - Generate Git tag and push to Git remote

Code tools:
    format              - Format code according to .clang-format
    type-guards         - Usage of deprecated [u]int[8|16|32|64] types
    query-source        - Search through codebase
    get-notes           - Get notes/todos from code
    "
;;
esac
