#!/bin/bash

[ -z $CI ] && set -xeuf -o pipefail

BUILD_CI=${BUILD_CI:-}

if [ $(uname) == 'Linux' ]; then
    BASE_DIR=$(readlink -f $(dirname "${0}"))
else
    BASE_DIR=${PWD}/$(dirname "${0}")
fi
TC_DIR=${BASE_DIR}/toolchain

# For Firebase reporting
export TRAVIS_BRANCH=$(git -C "${BASE_DIR}" rev-parse --abbrev-ref HEAD)
export TRAVIS_REPO_URL=$(git -C "${BASE_DIR}" remote get-url $(git -C "${BASE_DIR}" remote | head -1))

function all_source_files()
{
    local SRC_BASE_DIR=$(dirname "${0}")
    find "${SRC_BASE_DIR}"/src/coffee "${SRC_BASE_DIR}"/src/include -regex '.*\.\(cpp\|h\)' -type f $@      
}

function github_api() {
    echo github_api $@ >&2
    ${TC_DIR}/ci/github_api.py --verbose --api-token ${GITHUB_TOKEN} "$@"
}

case $1 in
"quick-build")
    if [ -z "$BUILD_CI" ]; then
        "${TC_DIR}"/quick-build.sh ${@:2}
    else
        BUILDVARIANT=${@:2} "${TC_DIR}"/ci/travis-build.sh
    fi
;;
"ci-build")
    source ${BASE_DIR}/.github/cmake/select/${BUILDVARIANT}.sh

    INSTALL_DIR=/build/install
    BUILD_DIR=/build/build

    if [ "$(uname)" = "Darwin" ]; then
        INSTALL_DIR="${BASE_DIR}/../install"
        BUILD_DIR="${BASE_DIR}/../build"
    fi

    mkdir -p ${BUILD_DIR} ${INSTALL_DIR}

    pushd ${BUILD_DIR}
    export GENERATE_PROGRAMS=${GENERATE_PROGRAMS:-ON}
    export CONFIGURATION=${CONFIGURATION:-Debug}
    export CMAKE_SOURCE_DIR=${BASE_DIR}
    export CMAKE_INSTALL_DIR=${INSTALL_DIR}
    cmake \
        -C${BASE_DIR}/.github/cmake/${BUILDVARIANT}.preload.cmake \
        -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
        ${BASE_DIR} ${@:2}
    cmake --build . --target ${BUILD_TARGET:-all}
    cmake --build . --target install
    popd
;;
"docker-build")
    if [ -z "$CONTAINER" ]; then
        source ${BASE_DIR}/.github/cmake/select/${BUILDVARIANT}.sh
    fi
    pwd
    docker run --rm \
        -v ${BASE_DIR}:/build/src \
        -v $PWD/build:/build/build \
        -v $PWD/install:/build/install \
        -e BUILDVARIANT=${BUILDVARIANT} \
        -e CONFIGURATION=${CONFIGURATION} \
        -e GENERATE_PROGRAMS=${GENERATE_PROGRAMS} \
        -e BUILD_TARGET=${BUILD_TARGET:-all} \
        -u root \
        ${CONTAINER} /build/src/cb ci-build ${@:2}
;;
"compress-usr-dir")
    INSTALL_DIR=$PWD/build/install

    if [ -f "${BASE_DIR}/deploy-script.sh" ]; then
        echo "-- Using customized deploy script"
        source ${BASE_DIR}/deploy-script.sh
    else
        OUTPUT=$PWD/${2}_${BUILDVARIANT}.tar.bz2
        echo "-- Creating $OUTPUT from $INSTALL_DIR"

        echo "-- Current directory: $(pwd)"

        echo "-- Source dir: ${BASE_DIR}"
        ls ${BASE_DIR}
        echo "-- Build dir: $PWD/build"
        ls $PWD/build
        echo "-- Install dir: ${INSTALL_DIR}"
        ls ${INSTALL_DIR}

        pushd ${INSTALL_DIR}
        case $2 in
        "bin")
            tar cvf ${OUTPUT} \
                --exclude=${INSTALL_DIR}/include \
                --exclude=${INSTALL_DIR}/lib \
                --exclude=${INSTALL_DIR}/share \
                ${INSTALL_DIR}
        ;;
        "libraries")
            tar cvf ${OUTPUT} \
                --exclude=${INSTALL_DIR}/bin \
                --exclude=${INSTALL_DIR}/packaged \
                ${INSTALL_DIR}
        ;;
        *)
            echo "-- Unhandled case $2"
        ;;
        esac
        popd
    fi
;;
"push-asset")
    TAG_NAME=$(github_api list tag "$TRAVIS_REPO_SLUG" "^$TRAVIS_COMMIT$" | cut -d'|' -f 2)

    [ -z "$TAG_NAME" ] && exit 1

    RELEASE_NAME=$(github_api list release "$TRAVIS_REPO_SLUG" "^$TRAVIS_COMMIT$" | cut -d'|' -f 1)

    [ -z "$RELEASE_NAME" ] && github_api push release "$TRAVIS_REPO_SLUG" "$TAG_NAME" "Release $TAG_NAME" "Automated release"

    for FILE in $(find . -maxdepth 1 -type f -name '*.'$2); do
        github_api push asset "$TRAVIS_REPO_SLUG:$TAG_NAME" "$(basename $FILE)"
    done
;;
"lint")
    find src/ -regextype egrep -regex '.*\.(h|hpp|c|cpp)' -exec ${0} lint-file {} \;
;;
"lint-file")
    FILE_IN=$(realpath ${2})

    pushd ${BASE_DIR}

    LINTED=$(${CLANG_FORMAT:-clang-format} -style=file ${FILE_IN})

    DIFF=$(diff -py -W 200 --suppress-common-lines ${FILE_IN} <(echo "$LINTED"))
    DIFF=$(echo "${DIFF}" | tr '\n' '%0A' | sed -e 's/\[/%5B/g' | sed -e 's/\]/%5D/g' | sed -e 's/;/%3B/g')
    echo "::warning file=${FILE_IN}::${DIFF}"

    popd
;;
"list-targets")
    grep '^[a-z]' toolchain/makers/Makefile.linux | grep FORCE | cut -d':' -f 1
    grep '^[a-z]' toolchain/makers/Makefile.mac | grep FORCE | cut -d':' -f 1

    echo "
To build a target, execute $0 quick-build [target]"
;;
"quick-build-deps")
    pip install PyYaml
;;
"ci")
    "${TC_DIR}"/configure_ci.py ${@:2}
;;
"version")
    "${TC_DIR}"/version.py ${@:2}
;;
"build-info")
    "${TC_DIR}"/buildinfo.py ${@:2}
;;
"extract-tools")
    "${TC_DIR}"/extract-tools.sh ${@:2}
;;
"extract-native-libs")
    "${TC_DIR}"/extract-native-libs.sh ${@:2}
;;
"generate-project")
    "${TC_DIR}"/generate_project.py ${@:2}
;;
"update-local-tools")
    "${TC_DIR}"/update-local-tools.sh ${@:2}
;;
"gen-release")
    set -e
    ${0} version ${@:2}
    git -C "${BASE_DIR}" add "${BASE_DIR}"/.build.yml
    git commit --verbose
    "${TC_DIR}"/git-gen-release.sh none
;;
"makefile-generator")
    pushd "${TC_DIR}"/makers
    PYTHONPATH=$TC_DIR "${TC_DIR}"/python/make_all.py
    popd
;;
"format")
    if [ -z "$CLANG_FORMAT" ]; then
        CLANG_FORMAT=clang-format   
    fi
    if [ -z "$2" ]; then
        all_source_files
    else
        all_source_files -exec $CLANG_FORMAT -style=file "$2" {} \;
    fi
;;
"include-guards")
    for f in $(all_source_files); do
        if [ ! -z "$(head -1 "$f" | grep '#ifndef ')" ]; then
            echo "$f"
        fi
    done
;;
"platform-guards")
    for f in $(all_source_files); do
        grep '^#if' "$f" /dev/null | grep -E 'defined[ ]*\([ ]*COFFEE_[A-Za-z]+\)'
    done
;;
"exception-guards")
    for f in $(all_source_files); do
        grep -E '[^A-Za-z0-9]throw ' "$f" /dev/null
    done
;;
"rtti-guards")
    for f in $(all_source_files); do
        grep -E 'typeid' "$f" /dev/null
    done
;;
"cast-guards")
    for f in $(all_source_files); do
        grep -E '(reinterpret|static|dynamic|const)_cast' "$f" /dev/null
    done
;;
"cpp11-guards")
    for f in $(all_source_files); do
        grep -E '(\[.*\]\s*\(.*?\)\s*\{|std::thread|std::function|std::unique_ptr|std::shared_ptr)' "$f" /dev/null
    done
;;
"stl-guards")
    for f in $(all_source_files); do
        grep -E '(std::| std)' "$f" /dev/null
    done
;;
"type-guards")
    for f in $(all_source_files); do
        grep -E '(u|)int(8|16|32|64)' "$f" /dev/null
    done
;;
"query-source")
    for f in $(all_source_files); do
        grep -E "$2" "$f" /dev/null
    done
;;
"filter-source")
    for f in $(all_source_files); do
        echo sed -e ${@:2} "$f"
    done
;;
"get-notes")
    for f in $(all_source_files); do
        grep -E  '(//|/\*)\s?(TODO|NOTE|WARNING|BUG|FIXME)' "$f" /dev/null
    done
;;
*)
echo "Available tools: 

Project management:
    generate-project    - Generate a new project directory

Build tools:
    quick-build         - Use pre-defined build environments
    list-targets        - List all available targets for building
    extract-tools       - Extract compiled tools into deployment directory
    extract-native-libs - Extract compiled libraries into deployment directory
    makefile-generator  - Regenerate meta-build system

CI/CD tools:
    ci                  - Generate CI files
    version             - Manage project version
    build-info          - Extract information from .build.yml
    gen-release         - Generate Git tag and push to Git remote

Code tools:
    format              - Format code according to .clang-format
    include-guards      - Detect files not using '#pragma once'
    platform-guards     - Find usages of platform guards in code
    exception-guards    - Find usages of exeptions that are not wrapped
    rtti-guards         - Find usages of RTTI
                          Currently detected:
                            - typeid(...)
    cast-guards         - Find usages of C++ *_cast<T>() operators
    cpp11-guards        - Find usages of features from C++11 and later
                          Currently detected:
                            - Lambdas
                            - std::*_ptr
                            - std::thread
                            - std::function
    stl-guards          - Usage of std::* types

    type-guards         - Usage of deprecated [u]int[8|16|32|64] types

    query-source        - Search through codebase
    filter-source       - Perform sed regex operations on codebase

    get-notes           - Get notes/todos from code
    "
;;
esac
