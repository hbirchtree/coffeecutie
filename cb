#!/bin/bash

[ -z $CI ] && set -euf -o pipefail

BUILD_CI=${BUILD_CI:-}

if [[ "$0" = /* ]]; then
    SELF=$0
    BASE_DIR=$(dirname $0)
else
    SELF=$PWD/$0
    BASE_DIR=${PWD}/$(dirname "${0}")
fi
TC_DIR=${BASE_DIR}/toolchain

source $BASE_DIR/toolchain/building.sh

function all_source_files()
{
    local SRC_BASE_DIR=$(dirname "${0}")
    find "${SRC_BASE_DIR}"/src/coffee "${SRC_BASE_DIR}"/src/include -regex '.*\.\(cpp\|h\)' -type f $@      
}

case $1 in
"print-env")
    cmake -N --preset $2 | grep -A512 'Preset environment variables' | grep -v 'Preset environment variables' | sed '/^$/d' | sed -e 's/^\s*//g'
    echo NINJA=$(which ninja)
    echo VCPKG_ROOT=$(dirname $(realpath $(which vcpkg)))
;;
"env")
    VARS=$(${0} print-env ${2//:/-} | tr  '\n' ' ')
    pushd $BASE_DIR/multi_build/${2//:/-}
    echo "Entering env with $VARS"
    eval $VARS $SHELL
    popd
;;
"build")
    ${0} $(echo $2 | cut -d: -f 1)-build ${@:2}
;;
beaglebone-build|desktop-build|generic-build|raspberry-build)
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified"
    fi
    native_build ${@:2}
;;
"web-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified"
    fi
    emscripten_build ${@:2}
;;
"xcode-build")
    xcode_build ${@:2}
;;
"android-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified"
        exit 0
    fi
    android_build ${@:2}
;;
"windows-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified"
        exit 0
    fi
    mingw_build ${@:2}
;;
"console-build")
    if [ -z "$2" ] || [ "$2" = "list" ] || [ "$2" = "help" ]; then
        echo "No target specified"
        exit 0
    fi
    native_build ${@:2}
;;
"push-asset")
    echo "::group::Pushing asset"
    TAG_NAME=$(git tag --points-at HEAD)

    if [ -z "$TAG_NAME" ]; then
        echo "::debug::Tag not found, not pushing"
        echo "::endgroup::"
        exit 0
    fi

    for FILE in $(find . -maxdepth 1 -type f -name '*.'$2); do
        gh release upload -R "$GITHUB_REPOSITORY" "$TAG_NAME" "$FILE" --clobber
    done
    echo "::endgroup::"
;;
"lint-cmake")
    echo "::group::Linting CMake files"
    cmake-format -i -c ${BASE_DIR}/.cmake-format ${BASE_DIR}/{examples,src,tests,toolchain,tools}
    echo "::endgroup::"
;;
"lint-file")
    FILE_IN=$(realpath ${2})

    pushd ${BASE_DIR}

    echo "NEEDS REIMPLEMENTATION"

    #echo "::warning file=${FILE_IN}::${DIFF}"

    popd
;;
"version")
    "${TC_DIR}"/version.py ${@:2}
;;
"build-info")
    "${TC_DIR}"/buildinfo.py ${@:2}
;;
"format")
    CLANG_FORMAT=$(CLANG_FORMAT:-clang-format)
    if [ -z "$2" ]; then
        all_source_files
    else
        all_source_files -exec $CLANG_FORMAT -style=file "$2" {} \;
    fi
;;
"type-guards")
    for f in $(all_source_files); do
        grep -E '(u|)int(8|16|32|64)' "$f" /dev/null
    done
;;
"query-source")
    for f in $(all_source_files); do
        git grep -E "$2"
    done
;;
"get-notes")
    for f in $(all_source_files); do
        git grep -E  '(//|/\*)\s?(TODO|NOTE|WARNING|BUG|FIXME)'
    done
;;
*)
echo "Available tools: 

Build tools:
    build               - Builds targets on the format <platform>:<arch>:<sysroot>
                          Available targets:"

cmake -S ${BASE_DIR} --list-presets | grep '\-' \
    | sed -E 's/ti-sgx/tisgx/g' \
    | sed -E 's/30-gl/30gl/g' \
    | sed -E 's/^  "([a-z]+)-(.*)-([a-z0-9]+)"( +- .*)$/        \1:\2:\3\4/g' \
    | sed -E 's/tisgx/ti-sgx/g' \
    | sed -E 's/30gl/30-gl/g' \
    | sed -E 's/^  "([a-z0-9-]+)"( +-.*)$/        \1\2/g'

# echo "
#     desktop-build       - Builds Linux targets natively without containers or host setup
#                           By default downloads a toolchain as specified in .build.yml
#                           Specify a custom path using TOOLCHAIN_ROOT
#     web-build           - Builds WebAssembly targets natively without containers or host setup
#                           By default downloads the emsdk version as specified in .build.yml
#                           Specify a custom path using TOOLCHAIN_ROOT
#     android-build       - Build Android target natively, options between x86-based and ARM-based targets"
echo "
    xcode-build         - Builds macOS/iOS targets natively

Metadata:
    version             - Manage project version
    build-info          - Extract information from .build.yml

Code tools:
    format              - Format code according to .clang-format
    lint-cmake          - Lint CMake project files
    type-guards         - Usage of deprecated [u]int[8|16|32|64] types
    query-source        - Search through codebase
    get-notes           - Get notes/todos from code
    "
;;
esac
