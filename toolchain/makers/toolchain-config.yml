#
# Templates
# Apply variables based on regex matching in a tree
# Nodes starting with = overwrite a variable, + appends to a the variable's list
# Other nodes are branching regexes
# Regexes follow Python rules
# Some variables are only there for descriptive reasons
#
=target: multi
=cmake-target:
  - install
=generator: Ninja
=build-type: $(build.build-type)
=preload: nothing.cmake
=lib.flavor: $(target-name)
=program.workdir: $(env:CMAKE_BUILD_DIR)
=shell: ''

# Default dependency
=dependencies: 

# Default container options
=container-opts: ''
=git-dep-target: $(target-name)

# Default CMake options
=cmake-opts:
  - $(cmake.src)
  - -G'$(generator)'
  - -C$(toolchain-dir)/Preload/$(preload)
  - -DGIT_DEP_BUILDVARIANT=$(git-dep-target)

# Android toolchain is always sourced from the Android NDK
^((?!android|emscripten).)*$:
    +cmake-opts:
      - -DCMAKE_TOOLCHAIN_FILE=$(toolchain-dir)/Toolchains/$(toolchain)

# unused, but links build dependencies to platforms
=build-deps:
  - assimp
  - openal
  - bullet
  - openssl

.*(osx|ios).*:
  =runner-choice: Makefile.mac-base
  ^((?!\$\(shell\)).)*$: # Don't apply this to shell targets
      =target: build
  =build.prettyname: Apple
  =generator: Xcode
  =compiler: Clang
  =cmake.src: $(project.src)
  =cmake.build: $(project.build)/$(target-name)
  =cmake.install: $(project.install)
  =cmake.coffee-lib: $(lib.root)
  #=cmake.native-lib: $(dependencies.native-libs.root)
  =cmake-project.src: $(project.src)/cmake
  =program.workdir: $(project.build)/$(target-name)
  =container-opts:
  .*osx.*:
    =description: Apple OS X
    =flavor: mac-osx
    =toolchain: osx-generic_osx.toolchain.cmake
    =preload: osx-generic.cmake
    +cmake-opts:
      - -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
    .*coverage.*:
      +cmake-opts:
        - -DBUILD_COVERAGE=ON
        - -DBUILD_ASAN=ON
        - -DBUILD_EXAMPLES=OFF
        - -DSKIP_HIGHMEM_TESTS=ON
        - -DSKIP_LINKAGE_TEST=ON
        - -DSKIP_OPENVR_TEST=ON
  .*ios.*:
    =toolchain: all-ios.toolchain.cmake
    =preload: osx-ios.cmake
  .*ios$:
    =description: Device-oriented build for ARM64 and ARMv7-A
  .*ios.x86.*:
    =description: iOS simulator build
    .*x86_64:
      +cmake-opts:
        - -DIOS_PLATFORM=SIMULATOR64
    .*x86$:
      +cmake-opts:
        - -DIOS_PLATFORM=SIMULATOR

# For Ubuntu, Fedora, docs and coverage, specify generic preload
(ubuntu|docs|coverage|testing.linux|fedora).*:
  (ubuntu.amd64.*|coverage|testing.linux|docs):
    =container: ubuntu
  .*(amd64.*|docs|coverage|testing.linux|fedora):
    =toolchain: linux-generic_linux.toolchain.cmake
  +build-deps:
    - appimg-runtime
    - SDL2

(ubuntu|fedora|coverage|testing.linux|android|steam|raspberry|mingw).*:
  =generator: CodeBlocks - Ninja

# Some parameters to make coverage testing work
coverage:
  =description: Coverage build using same config as Ubuntu
  =compiler: Clang
  =preload: linux-coverage.cmake
  =build-type: Debug
  =git-dep-target: ubuntu.amd64
  +container-opts:
    - -e CC=
    - -e CXX=

testing.linux.*:
  =compiler: GCC 7+
  =git-dep-target: ubuntu.amd64
  +container-opts:
    - -e CC=
    - -e CXX=
  +cmake-opts:
    - -DBUILD_EXAMPLES=OFF
    - -DSKIP_HIGHMEM_TESTS=ON
    - -DSKIP_LINKAGE_TEST=ON
    - -DSKIP_OPENVR_TEST=ON
  .*lowfat.*:
    +cmake-opts:
      - -DLOWFAT_BUILD=ON
  .*debug:
    =build-type: Debug
  .*release:
    =build-type: Release
  testing.linux.lowfat.debug:
    =description: Lowfat debug-mode testing
  testing.linux.lowfat.release:
    =description: Lowfat release-mode testing
  testing.linux.release:
    =description: Release-mode testing

.*docs:
  =description: Documentation build using only Doxygen
  =compiler: Doxygen
  =preload: docs-all.cmake

.*ubuntu.*:
  =description: Ubuntu build in a Ubuntu Docker
  =compiler: GCC 7+
  =preload: linux-generic.cmake
  .*i686.*:
    =container: ubuntu-i686
    =toolchain: linux-generic-i686_linux.toolchain.cmake
  .*gles[^2]?$:
    =preload: linux-gles.cmake
  .*gles2:
    =preload: linux-gles20.cmake

.*fedora.*:
  =description: Fedora build in a Fedora Docker
  =compiler: GCC 8+
  =preload: linux-fedora.cmake
  =container: fedora


.*steam.*:
  =description: Build against the SteamRT SDK
  =compiler: GCC 4.8.4
  =preload: linux-steam.cmake
  =toolchain: cxx11.toolchain.cmake
  =container: steam
  +cmake-opts:
    - -DBUILD_CPP11=ON
  +container-opts:
    - -e CC=clang-3.6
    - -e CXX=clang++-3.6


.*emscripten.*:
  =description: Emscripten with WebAssembly
  =compiler: Clang 7+
  =container: emscripten
  =preload: js-emscripten.cmake
  =emscripten.root: $(dependencies.emscripten.target)/upstream/emscripten
  =emscripten.cmake: $(emscripten.root)/cmake
  +dependencies:
    - emscripten
  +cmake-opts:
    - -DEMSCRIPTEN_ROOT_PATH=$(emscripten.root)
    - -DCMAKE_TOOLCHAIN_FILE=$(emscripten.cmake)/Modules/Platform/Emscripten.cmake
  +container-opts:
    - -e EMSCRIPTEN=$(emscripten.root)
    - -e CMAKE='emcmake cmake'
  .*wasm.*:
    =preload: js-emscripten-wasm.cmake


.*android.*:
  =description: Android builds, ARMv8-A and ARMv7-A mostly
  =compiler: Clang
  # Architecture specifics
  .*armv8a.*:
    =android.abi: arm64-v8a
  .*armv7a.*:
    =android.abi: 'armeabi-v7a with NEON'
  .*armeabi.*:
    =android.abi: armeabi
  .*(x86\.).*:
    =android.abi: x86
  .*(x86_64).*:
    =android.abi: x86_64
  .*(mips\.).*:
    =android.abi: mips
  .*(mips64).*:
    =android.abi: mips64
  # Specifying native API level
  .*(jelly|kitkat).*:
    =android.api: 19
  .*(lollipop|marshmallow).*:
    =android.api: 21
  .*nougat.*:
    =android.api: 24
  # Graphical properties
  .*gles3.*:
    =android.gles20: OFF

  =android.toolchain: clang
  =android.ssl.dir: $(cmake.native-lib)/$(build.prettyname)/libraries/$(android.abi)/ssl
  +cmake-opts:
    # Yay! Configuring the entire Android toolchain
    - -DANDROID_NDK=$(android.ndk)
    - -DANDROID_SDK=$(android.sdk)
    - -DANDROID_TOOLCHAIN=$(android.toolchain)
    - -DANDROID_STL=$(android.stl)
    - -DANDROID_PLATFORM=android-$(android.api)
    - -DANDROID_ABI='$(android.abi)'
    - -DANDROID_CPP_FEATURES=$(android.features)
    - -DANDROID_ARM_NEON=$(android.arm-neon)
    - -DCMAKE_TOOLCHAIN_FILE=$(android.ndk)/build/cmake/android.toolchain.cmake
  =container: android


.*maemo.*:
  =description: Maemo 5 builds, performed within a Maemo 5 armel chroot
  =compiler: GCC 6
  =preload: linux-maemo.cmake
  =toolchain: linux-maemo-armv7_linux.toolchain.cmake
  =container: hbirch/maemo-builder:v3
  =build.build-type: Release
  =target: multi.make8
  =generator: Unix Makefiles
  =container-opts:
      #- -v $(dependencies.native-libs.root):/maemo/$(dependencies.native-libs.target):ro
    - -v $(lib.root):/maemo/$(lib.target):ro
    - -v $(project.src):/maemo/$(container.src):ro
    - -v $(project.install):/maemo/$(container.install):rw
    - -v $(project.build)/$(target-name):/maemo/$(container.build):rw


.*raspberry.*:
  =description: Raspberry Pi ARM 32-bit build
  =compiler: GCC 8.3
  =preload: linux-raspberry.cmake
  =toolchain: linux-raspberry-armhf_linux.toolchain.cmake
  =container: raspberry
  +dependencies: rpi-sdk
  +cmake-opts:
    - -DRASPBERRY_SDK=/pi-sysroot

.*mingw.*:
  =description: MinGW64 environment in Ubuntu Docker
  =compiler: GCC 5+
  =toolchain: windows-mingw64_linux.toolchain.cmake
  =preload: windows-mingw64.cmake
  =container: mingw64

.*gamecube.*:
  =description: Nintendo Gamecube through DevkitPPC
  =compiler: GCC 6+
  =toolchain: none-cube-powerpc-eabi_linux.toolchain.cmake
  =container: hbirch/devkit:ppc

(ubuntu.*|coverage|testing.linux|docs):
  =build.prettyname: Ubuntu
.*(fedora.*):
  =build.prettyname: Fedora
.*(steam.*):
  =build.prettyname: SteamOS
.*(maemo.*):
  =build.prettyname: Maemo
.*(android.*):
  =build.prettyname: Android
.*(raspberry.*):
  =build.prettyname: RaspberryPi
.*(mingw.*):
  =build.prettyname: MinGW
.*(emscripten.*):
  =build.prettyname: Emscripten
.*(gamecube.*):
  =build.prettyname: GCN/DevkitPPC
.*\$\(shell\)$:
  =target: shell
