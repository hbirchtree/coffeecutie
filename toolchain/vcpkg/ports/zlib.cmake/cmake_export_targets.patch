diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0fe939d..ebb09f7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -5,19 +5,22 @@ project(zlib C)
 
 set(VERSION "1.2.11")
 
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
 option(ASM686 "Enable building i686 assembly implementation")
 option(AMD64 "Enable building amd64 assembly implementation")
 
-set(INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory for executables")
-set(INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Installation directory for libraries")
-set(INSTALL_INC_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "Installation directory for headers")
-set(INSTALL_MAN_DIR "${CMAKE_INSTALL_PREFIX}/share/man" CACHE PATH "Installation directory for manual pages")
-set(INSTALL_PKGCONFIG_DIR "${CMAKE_INSTALL_PREFIX}/share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")
+set(INSTALL_BIN_DIR "bin" CACHE PATH "Installation directory for executables")
+set(INSTALL_LIB_DIR "lib" CACHE PATH "Installation directory for libraries")
+set(INSTALL_INC_DIR "include" CACHE PATH "Installation directory for headers")
+set(INSTALL_MAN_DIR "share/man" CACHE PATH "Installation directory for manual pages")
+set(INSTALL_PKGCONFIG_DIR "lib/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")
 
 include(CheckTypeSize)
 include(CheckFunctionExists)
 include(CheckIncludeFile)
 include(CheckCSourceCompiles)
+include(CMakePackageConfigHelpers)
 enable_testing()
 
 check_include_file(sys/types.h HAVE_SYS_TYPES_H)
@@ -188,6 +191,13 @@ add_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_ASMS} ${ZLIB_PUBLIC_HDRS} ${ZL
 set_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)
 set_target_properties(zlib PROPERTIES SOVERSION 1)
 
+target_include_directories ( zlib PUBLIC
+    $<INSTALL_INTERFACE:include>
+    )
+target_include_directories ( zlibstatic PUBLIC
+    $<INSTALL_INTERFACE:include>
+    )
+
 if(NOT CYGWIN)
     # This property causes shared libraries on Linux to have the full version
     # encoded into their final filename.  We disable this on Cygwin because
@@ -212,9 +222,11 @@ endif()
 
 if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
     install(TARGETS zlib zlibstatic
+        EXPORT zlib
         RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
         ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
-        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" )
+        LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
+        PUBLIC_HEADER DESTINATION include )
 endif()
 if(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )
     install(FILES ${ZLIB_PUBLIC_HDRS} DESTINATION "${INSTALL_INC_DIR}")
@@ -226,24 +238,36 @@ if(NOT SKIP_INSTALL_FILES AND NOT SKIP_INSTALL_ALL )
     install(FILES ${ZLIB_PC} DESTINATION "${INSTALL_PKGCONFIG_DIR}")
 endif()
 
+install ( EXPORT zlib
+    NAMESPACE zlib::
+    DESTINATION lib/cmake/zlib )
+
+configure_package_config_file(Config.cmake.in
+    zlibConfig.cmake
+    INSTALL_DESTINATION ${CMAKE_INSTALL_PREFIX}
+    )
+
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/zlibConfig.cmake
+    DESTINATION lib/cmake/zlib )
+
 #============================================================================
 # Example binaries
 #============================================================================
 
 add_executable(example test/example.c)
-target_link_libraries(example zlib)
+target_link_libraries(example zlibstatic)
 add_test(example example)
 
 add_executable(minigzip test/minigzip.c)
-target_link_libraries(minigzip zlib)
+target_link_libraries(minigzip zlibstatic)
 
 if(HAVE_OFF64_T)
     add_executable(example64 test/example.c)
-    target_link_libraries(example64 zlib)
+    target_link_libraries(example64 zlibstatic)
     set_target_properties(example64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
     add_test(example64 example64)
 
     add_executable(minigzip64 test/minigzip.c)
-    target_link_libraries(minigzip64 zlib)
+    target_link_libraries(minigzip64 zlibstatic)
     set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS "-D_FILE_OFFSET_BITS=64")
 endif()
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..e58718e
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,19 @@
+# Compute paths
+set ( @PROJECT_NAME@_VERSION @PROJECT_VERSION@ )
+
+@PACKAGE_INIT@
+
+get_filename_component(@PROJECT_NAME@_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+set(@PROJECT_NAME@_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")
+
+set(@PROJECT_NAME@_COMPILE_DEFINITIONS @COMP_DEFS@)
+
+# Our library dependencies (contains definitions for IMPORTED targets)
+if(NOT TARGET @PROJECT_NAME@ AND NOT @PROJECT_NAME@_BINARY_DIR)
+  include("${@PROJECT_NAME@_CMAKE_DIR}/@PROJECT_NAME@.cmake")
+endif()
+
+# These are IMPORTED targets created by FooBarTargets.cmake
+set(@PROJECT_NAME@_LIBRARIES @LIBRARY_DEFINITIONS@)
+
+check_required_components ( @PROJECT_NAME@ )
