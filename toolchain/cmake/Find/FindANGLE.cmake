set ( ANGLE_ROOT_DIR ${ANGLE_ROOT_DIR} CACHE PATH "" )

set ( ANGLE_SEARCH_PATHS
	${ANGLE_ROOT_DIR}
	${CMAKE_BINARY_DIR}/libs
	${NATIVE_LIBRARY_DIR}
	${COFFEE_ROOT_DIR}
	)
set ( ANGLE_LIB_SUFFIXES
        "lib/${WINDOWS_ABI}" #Future-proofing for x86/x86_64/armv7/arm64

        "lib/${CMAKE_LIBRARY_ARCHITECTURE}/Release"
        "bin/UAP/${CMAKE_LIBRARY_ARCHITECTURE_UWP}" #Future-proofing for x86/x86_64/armv7/arm64
	)

FIND_PATH( ANGLE_INCLUDE_DIR_TMP
	EGL/egl.h
    GLES2/gl2.h

	PATHS ${ANGLE_SEARCH_PATHS}

	PATH_SUFFIXES include
)

FIND_LIBRARY(
	ANGLE_EGL_LIBRARY_TMP
	NAMES EGL libEGL
	PATHS ${ANGLE_SEARCH_PATHS}
	PATH_SUFFIXES ${ANGLE_LIB_SUFFIXES}
	)

FIND_LIBRARY(
	ANGLE_GLESv2_LIBRARY_TMP
	NAMES GLESv2 libGLESv2
	PATHS ${ANGLE_SEARCH_PATHS}
	PATH_SUFFIXES ${ANGLE_LIB_SUFFIXES}
	)

if(ANGLE_EGL_LIBRARY_TMP AND ANGLE_GLESv2_LIBRARY_TMP)
	set ( ANGLE_LIBRARIES "${ANGLE_EGL_LIBRARY_TMP};${ANGLE_GLESv2_LIBRARY_TMP}" CACHE STRING "" )
endif()
if(ANGLE_INCLUDE_DIR_TMP)
	set ( ANGLE_INCLUDE_DIR "${ANGLE_INCLUDE_DIR_TMP}" CACHE STRING "" )
endif()

if(NOT TARGET AngleEGL)
    add_library ( AngleEGL STATIC IMPORTED )
    add_library ( AngleGLESv2 STATIC IMPORTED )

    set_target_properties( AngleEGL
           PROPERTIES
           IMPORTED_LOCATION "${ANGLE_EGL_LIBRARY_TMP}"
           INTERFACE_LINK_LIBRARIES "${ANGLE_EGL_LIBRARY_TMP}"
           INTERFACE_INCLUDE_DIRECTORIES "${ANGLE_INCLUDE_DIR}"
           )
    set_target_properties( AngleGLESv2
        PROPERTIES
           IMPORTED_LOCATION "${ANGLE_GLESv2_LIBRARY_TMP}"
           INTERFACE_LINK_LIBRARIES "${ANGLE_GLESv2_LIBRARY_TMP}"
           INTERFACE_INCLUDE_DIRECTORIES "${ANGLE_INCLUDE_DIR}"
           )
endif()

INCLUDE(FindPackageHandleStandardArgs)

FIND_PACKAGE_HANDLE_STANDARD_ARGS(ANGLE REQUIRED_VARS ANGLE_LIBRARIES ANGLE_INCLUDE_DIR)
